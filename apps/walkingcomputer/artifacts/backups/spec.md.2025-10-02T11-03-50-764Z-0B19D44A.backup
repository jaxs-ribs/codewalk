# Project Description

We're building a smooth, modern Snake game that runs right in your browser. The core gameplay feels familiar - you'll guide a growing snake around the screen eating food - but we've added some exciting twists that make it feel fresh and fun.

The game features silky-smooth CSS animations for every movement. When your snake glides across the screen, it flows naturally with easing curves rather than jerky grid jumps. Eating food triggers satisfying particle effects that burst outward, and growing longer happens through a smooth extension animation rather than an abrupt pop.

We've layered in rich sound design that makes everything feel tactile and responsive. Each food pellet gives a distinct crunch, movement produces subtle whoosh sounds that vary with speed, and special events like portal activation have their own unique audio cues. The audio system uses Web Audio API for consistent performance across devices.

Here's where it gets really interesting - we've added portal mechanics that let you zip between different screen areas. These glowing circular portals appear randomly and create strategic shortcuts. You can enter one portal and emerge from another, letting you escape tight situations or quickly reach distant food. The portals have swirling visual effects and gentle humming sounds when active.

The game includes multiple difficulty levels that affect snake speed, portal frequency, and food spawn rates. A subtle glow effect follows your snake, growing more intense as you score increases. The entire interface uses modern glassmorphism design with translucent panels over a dark, gradient background.

We'll track high scores locally and include responsive design so it plays perfectly on both desktop and mobile devices. Touch controls adapt seamlessly - you simply swipe in the direction you want to go, with haptic feedback on supported devices.

# Project Phasing

## Phase 1: HTML Canvas Setup
Create the basic HTML file with canvas element and establish the rendering foundation.
**Definition of Done:** Open index.html in browser, see black 600x600 canvas centered on page, no errors in console.

## Phase 2: Game Loop Foundation
Implement the core game loop and grid rendering system.
**Definition of Done:** Open index.html, see empty grid (20x20 squares) drawn on canvas, game loop running at 5 FPS (grid redraws every 200ms), canvas context properly initialized, grid rendering function correctly bound to requestAnimationFrame, and frame rate accurately measured using performance.now().

## Phase 3: Snake Entity Creation and Rendering
Create the snake entity and render it on the grid
**Definition of Done:** Open index.html, see a green snake (3 segments) statically displayed on the grid with segments aligned to grid cells

## Phase 4: Snake Movement Implementation with Direction Control
Implement continuous movement with direction control using arrow keys
**Definition of Done:** Verify that the snake moves continuously across the grid, responds to arrow key presses to change direction, and continues moving in the new direction

## Phase 5: Food Spawning
Implement a dynamic food entity that randomly spawns at diverse grid positions, ensuring a unique and engaging experience with each page refresh, and guaranteeing the food pellet's visibility and correct placement within the grid layout
**Definition of Done:** Open index.html, see a red food pellet at a random grid location, refresh the page, and verify the food appears at a different location, ensuring the food spawning mechanism is fully functional and consistently produces the expected outcome.

## Phase 6: Food Collision
Detect when first block touches food and handle the collision.
**Definition of Done:** Navigate first block to food, food disappears, console logs 'Food eaten at [x,y]', run 3 times to verify.

## Phase 7: Snake Growth
Implement snake growth mechanic when eating food.
**Definition of Done:** Eat food, snake grows from 3 to 4 segments visible, next food spawns at new location.

## Phase 8: Wall Collision
Add boundary detection for canvas edges.
**Definition of Done:** Navigate snake head to wall edge, game freezes with snake at wall, console logs "Wall collision at [x,y]".

## Phase 9: Self Collision
Detect when snake head touches its own body.
**Definition of Done:** Create snake loop, navigate head into body, game freezes, console logs "Self collision at [x,y]".

## Phase 10: Game State Management
Implement game over state and restart capability.
**Definition of Done:** Trigger collision, see "Game Over" text on canvas, press spacebar, game resets with 3-segment snake.

## Phase 11: Audio Context Setup
Initialize Web Audio API with basic tone generation.
**Definition of Done:** Open console, run `testTone()`, hear 440Hz beep for 0.2 seconds, no audio errors in console.

## Phase 12: Food Sound Effect
Add rising tone when eating food.
**Definition of Done:** Eat food, hear tone rise from 400Hz to 800Hz over 0.3 seconds, sound plays once per food eaten.

## Phase 13: Collision Sound Effect
Add descending buzzer for game over.
**Definition of Done:** Trigger collision, hear descending tone from 600Hz to 200Hz over 0.5 seconds.

## Phase 14: Visual Effects
Implement screen shake on collision and snake trail effect.
**Definition of Done:** Trigger collision, see canvas shift 5 pixels for 200ms, move snake to see faint green trails at 3 previous positions.