# Project Phasing

## Phase 1: Core Profile Setup
So first we'll build the absolute basics - a way for people to create their profile with just a name, age, and one photo. We'll use Firebase Auth for quick email/password signup, and Firebase Storage to handle that single profile picture upload. The UI will be super minimal - just a few text inputs and an image picker, nothing fancy yet. We'll also set up the basic navigation between a simple profile creation screen and a blank main screen, so people can actually move through the app once they're logged in.

**Definition of Done:** Create a test account with name "Sarah", age 28, upload any photo, and verify you can see this profile data displayed on the main screen after login.

## Phase 2: Swipe Mechanics
Then we'll add the core Tinder experience - that satisfying swipe left to pass, swipe right to like functionality. We'll implement a card stack using react-native-deck-swapper where each card shows another user's photo and basic info. When someone swipes right, we'll store that as a "like" in Firestore, and swiping left just removes them from the stack forever. The cards will have that nice spring animation when you swipe, and we'll make sure the next card smoothly slides into place so the experience feels fluid and responsive.

**Definition of Done:** Create two test accounts, verify Account A can swipe through Account B's profile card, and check Firestore to confirm the like record exists when swiping right.

## Phase 3: Matching System
After that we'll handle what happens when two people both swipe right on each other - the magical "It's a Match!" moment. We'll query Firestore to check for mutual likes, and when we find them we'll show a simple modal overlay with both profile photos and a big "Start Chatting" button. For now, tapping that button will just close the modal since we haven't built messaging yet, but people will know they've connected and can look forward to chatting later.

**Definition of Done:** Using two test accounts, have Account A like Account B, then login as Account B and like Account A back - verify the match popup appears with both profiles displayed correctly.

## Phase 4: Basic Chat
Next we'll build a simple messaging system so matched people can actually talk to each other. We'll create a basic chat screen that shows conversation bubbles with timestamps, and use Firestore's real-time listeners so messages appear instantly without refreshing. The chat will be super simple - just text messages in chronological order, no read receipts or typing indicators yet. We'll also add a chat list screen where people can see all their matches and tap to open conversations.

**Definition of Done:** After creating a match between two test accounts, send "Hey there!" from Account A and verify Account B sees the message appear in real-time within their chat conversation.

## Phase 5: Discovery Settings
Finally we'll add basic filtering so people aren't just seeing everyone - they can set preferences for age range and gender they're interested in. We'll update the swipe query to respect these filters, and add a simple settings screen where people can adjust their discovery preferences with some sliders and toggles. This makes the app actually usable for real dating, since not everyone wants to see all profiles and people have different preferences for who they're looking to meet.

**Definition of Done:** Set Account A's preferences to "Women, ages 25-30", create test accounts outside this range, and verify only profiles matching the criteria appear in the swipe deck.